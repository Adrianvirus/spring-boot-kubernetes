# Starter pipeline

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool: Default

stages:
################## Step SAST ##################
- stage: SAST
  jobs:
  - job: SAST
    displayName: 'Static Analysis and Security Testing'
    steps:
    - task: SonarCloudPrepare@1
      displayName: 'Preparacion Sonar Cloud'
      inputs:
        SonarCloud: 'Sonar'
        organization: 'adrianvirus2022'
        scannerMode: 'Other'
        extraProperties: |
            # Additional properties that will be passed to the scanner,
            # Put one key=value per line, example:
            # sonar.exclusions=**/*.bin
            sonar.projectKey=adrianvirus2022
            sonar.projectName=adrianvirus2022
    - task: Maven@4
      displayName: 'Analisis Codigo - Maven'
      inputs:
        mavenPomFile: 'pom.xml'
        publishJUnitResults: false
        codeCoverageToolOption: 'JaCoCo'
        javaHomeOption: 'JDKVersion'
        mavenVersionOption: 'Default'
        mavenAuthenticateFeed: false
        effectivePomSkip: false
        sonarQubeRunAnalysis: true
        isJacocoCoverageReportXML: true
        sqMavenPluginVersionChoice: 'latest'
        checkStyleRunAnalysis: true
        pmdRunAnalysis: true
        findBugsRunAnalysis: true

    - task: sonarcloud-buildbreaker@2
      displayName: 'The Breaker'
      inputs:
        SonarCloud: 'Sonar'
        organization: 'adrianvirus2022'
    - task: SonarCloudPublish@1
      displayName: 'Publicacion de reporte SonarCloud'
      inputs:
        pollingTimeoutSec: '300'
    
################## Step SCA ##################
- stage: SCA
  jobs:
  - job: SCA
    displayName: 'Software Composition Analysis'
    steps:
    - task: Maven@3
      inputs:
        mavenPomFile: 'pom.xml'
        publishJUnitResults: true
        testResultsFiles: '*/surefire-reports/TEST-.xml'
        javaHomeOption: 'JDKVersion'
        mavenVersionOption: 'Default'
        mavenAuthenticateFeed: false
        effectivePomSkip: false
        sonarQubeRunAnalysis: false
    - task: dependency-check-build-task@6
      inputs:
        projectName: 'spring-boot-kubernetes'
        scanPath: '$(Build.ArtifactStagingDirectory)'
        format: 'HTML'

################## Step CS ##################
- stage: CS
  jobs:
  - job: CS
    displayName: 'Container Security'
    steps:  
    - task: Maven@4
      displayName: Build app - Maven
      inputs:
        mavenPomFile: 'pom.xml'
        publishJUnitResults: true
        testResultsFiles: '*/surefire-reports/TEST-.xml'
        javaHomeOption: 'JDKVersion'
        mavenVersionOption: 'Default'
        mavenAuthenticateFeed: false
        effectivePomSkip: false
        sonarQubeRunAnalysis: false
    - task: Docker@2
      displayName: 'Registro de docker'
      inputs:
        containerRegistry: 'docker_adrianvirus'
        command: 'login'
    - task: Docker@2
      displayName: 'Build and Push'
      inputs:
        containerRegistry: 'docker_adrianvirus'
        repository: 'adrianvirus/laboratorio'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: 'latest'

    - script: |
        sudo apt-get install -y rpm
        wget https://github.com/aquasecurity/trivy/releases/download/v0.27.1/trivy_0.27.1_Linux-64bit.deb
        sudo dpkg -i trivy_0.27.1_Linux-64bit.deb
        trivy image adrianvirus/laboratorio:latest
      displayName: 'Scanner de Imagen Docker'

    - task: CmdLine@2
      displayName: Scan
      inputs:
        script: |
          docker run -v /var/run/docker.sock:/var/run/docker.sock -v $PWD:/app --rm aquasec/trivy image --severity HIGH,CRITICAL --no-progress --format template --template "@contrib/junit.tpl" -o /app/junit-report.xml ${IMAGE}
          cp junit-report.xml $(Build.ArtifactStagingDirectory)/junit-report.xml

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

    #Publicación de los resultados del análisis
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/junit-*.xml'
        mergeTestResults: true
        failTaskOnFailedTests: true
        testRunTitle: 'Trivy'
      condition: 'always()'